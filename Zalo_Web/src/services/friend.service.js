import Friend from "../models/friends.model.js";
import User from "../models/users.model.js";

// G·ª≠i y√™u c·∫ßu k·∫øt b·∫°n
export const sendFriendRequest = async (senderId, phoneNumber) => {
  const receiver = await User.findOne({ phoneNumber });

  if (!receiver) {
    throw new Error(
      "S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n ho·∫∑c kh√¥ng cho ph√©p t√¨m ki·∫øm"
    );
  }

  if (senderId.toString() === receiver._id.toString()) {
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n cho ch√≠nh m√¨nh");
  }

  const existingRequest = await Friend.findOne({
    $or: [
      { actionUser: senderId, targetUser: receiver._id },
      { targetUser: receiver._id, actionUser: senderId },
    ],
  });

  if (existingRequest) {
    switch (existingRequest.status) {
      case "pending":
        throw new Error(
          "B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n ho·∫∑c ƒë√£ nh·∫≠n y√™u c·∫ßu t·ª´ ng∆∞·ªùi n√†y"
        );
      case "accepted":
        throw new Error("B·∫°n ƒë√£ l√† b·∫°n b√® v·ªõi ng∆∞·ªùi n√†y");
      case "blocked":
        throw new Error("B·∫°n ƒë√£ b·ªã ch·∫∑n b·ªüi ng∆∞·ªùi n√†y");
    }
  }

  const newRequest = await Friend.create({
    actionUser: senderId,
    targetUser: receiver._id,
    status: "pending",
  });

  return newRequest;
};

// Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
export const acceptFriendRequest = async (requestId, userId) => {
  const friendRequest = await Friend.findById(requestId);

  if (!friendRequest) {
    throw new Error("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu k·∫øt b·∫°n.");
  }

  if (friendRequest.status === "accepted") {
    throw new Error("C√°c b·∫°n ƒë√£ l√† b·∫°n b√®.");
  }

  if (friendRequest.status !== "pending") {
    throw new Error("Y√™u c·∫ßu k·∫øt b·∫°n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω");
  }

  if (friendRequest.targetUser === userId) {
    throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·∫•p nh·∫≠n y√™u c·∫ßu n√†y");
  }

  // ƒê·ªïi ch·ªó actionUser v√† targetUser
  const oldActionUser = friendRequest.actionUser;
  friendRequest.actionUser = friendRequest.targetUser;
  friendRequest.targetUser = oldActionUser;
  friendRequest.status = "accepted";
  await friendRequest.save();

  return friendRequest;
};

// T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
export const rejectFriendRequest = async (requestId, userId) => {
  const friendRequest = await Friend.findById(requestId);

  if (!friendRequest) {
    throw new Error("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu k·∫øt b·∫°n.");
  }

  if (friendRequest.status !== "pending") {
    throw new Error("Y√™u c·∫ßu k·∫øt b·∫°n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω");
  }

  if (friendRequest.targetUser.toString() !== userId.toString()) {
    throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi y√™u c·∫ßu n√†y");
  }

  friendRequest.status = "rejected";
  await friendRequest.save();

  return friendRequest;
};

// H·ªßy l·ªùi m·ªùi k·∫øt b·∫°n ho·∫∑c x√≥a b·∫°n
export const removeFriend = async (userId, friendId) => {
  return await Friend.deleteMany({
    $or: [
      { userId, friendId },
      { userId: friendId, friendId: userId },
    ],
  });
};

//L·∫•y danh s√°ch b·∫°n b√®
export const getFriendsList = async (userId) => {
  const friends = await Friend.find({
    status: "accepted",
    $or: [{ actionUser: userId }, { targetUser: userId }],
  })
    .populate("actionUser", "-password -password_set -appToken -webToken")
    .populate("targetUser", "-password -password_set -appToken -webToken");

  const filtered = friends.map((f) => {
    if (f.actionUser._id.toString() === userId.toString()) {
      return f.targetUser;
    } else {
      return f.actionUser;
    }
  });

  return filtered;
};

// T√¨m t·∫•t c·∫£ y√™u c·∫ßu k·∫øt b·∫°n c·ªßa targetUserId v·ªõi tr·∫°ng th√°i "pending"
export const getPendingFriendRequests = async (targetUserId) => {
  try {
    const requests = await Friend.find({
      targetUser: targetUserId,
      status: "pending",
    })
      .populate("actionUser", "fullName profilePic")
      .exec();

    return {
      totalRequests: requests.length,
      requests: requests,
    };
  } catch (error) {
    throw new Error(
      "Kh√¥ng th·ªÉ l·∫•y danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n: " + error.message
    );
  }
};

export const checkIfFriends = async (userId1, userId2) => {
  try {
    const friendship = await Friend.findOne({
      $or: [
        { actionUser: userId1, targetUser: userId2 },
        { actionUser: userId2, targetUser: userId1 },
      ],
    }).exec();

    if (!friendship) {
      return { isFriend: false, status: null };
    } else if (friendship.status === "pending") {
      return { isFriend: false, status: "pending", ...friendship.toObject() };
    } else if (friendship.status === "blocked") {
      return { isFriend: false, status: "blocked", ...friendship.toObject() };
    } else if (friendship.status === "cancelled") {
      return { isFriend: false, status: "cancelled", ...friendship.toObject() };
    } else if (friendship.status === "rejected") {
      return { isFriend: false, status: "rejected", ...friendship.toObject() };
    }
    // enum: ["pending", "accepted", "blocked", "cancelled", "rejected"],
    return { isFriend: true, ...friendship.toObject() }; // üëà l·∫•y to√†n b·ªô field
  } catch (error) {
    throw new Error("Error while checking friendship status");
  }
};

//L·∫•y m·ªëi quan h·ªá gi·ªØa 2 ng∆∞·ªùi d√πng
export const getFriendRelationship = async (userId, friendId) => {
  try {
    const relationship = await Friend.findOne({
      $or: [
        { actionUser: userId, targetUser: friendId },
        { actionUser: friendId, targetUser: userId },
      ],
    });

    if (!relationship) {
      return null;
    }

    return relationship;
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y m·ªëi quan h·ªá: " + error.message);
  }
};
